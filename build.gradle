import org.apache.tools.ant.taskdefs.condition.Os
import org.jetbrains.dokka.gradle.DokkaTask

plugins {
    id 'maven-publish'
    id 'signing'
    id 'org.jetbrains.kotlin.multiplatform' version '1.4.0'
    id 'org.jetbrains.dokka' version '1.4.0-rc'
}

group 'com.willowtreeapps.opentest4k'
version '1.2.1-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
}

kotlin {
    jvm()
    js(BOTH) {
        nodejs()
        browser()
        compilations.main.kotlinOptions {
            sourceMap = true
            moduleKind = "umd"
        }
        compilations.test.kotlinOptions {
            moduleKind = "umd"
        }
    }
    linuxX64('linux')
    ios()
    macosX64('macos')

    sourceSets {
        commonMain {
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                api "org.opentest4j:opentest4j:1.2.0"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
                implementation kotlin('reflect')
            }
        }
        // Non-jvm impl
        otherMain {
            dependsOn(commonMain)
        }
        otherTest {
            dependsOn(commonTest)
        }
        jsMain {
            dependsOn(otherMain)
        }
        jsTest {
            dependsOn(otherTest)
            dependencies {
                implementation kotlin('test-js')
            }
        }
        nativeMain {
            dependsOn(otherMain)
        }
        nativeTest {
            dependsOn(otherTest)
        }
        [linuxMain, iosMain, macosMain].each {
            it.dependsOn(nativeMain)
        }
        [linuxTest, iosTest, macosTest].each {
            it.dependsOn(nativeTest)
        }
    }
}

task nativeTest {
    dependsOn(linuxTest, macosTest, iosX64Test)
}

task test {
    dependsOn(allTests)
}

ext {
    isReleaseVersion = !(project.version =~ /-SNAPSHOT$/)
}

task dokkaCommon(type: DokkaTask) {
    outputDirectory = "$buildDir/javadoc/common"
    dokkaSourceSets {
        commonMain {}
    }
}

task dokkaJs(type: DokkaTask) {
    outputDirectory = "$buildDir/javadoc/js"
    dokkaSourceSets {
        commonMain {}
        jsMain {}
    }
}

task dokkaJvm(type: DokkaTask) {
    outputDirectory = "$buildDir/javadoc/jvm"
    dokkaSourceSets {
        commonMain {}
        jvmMain {}
    }
}

task dokkaNative(type: DokkaTask) {
    outputDirectory = "$buildDir/javadoc/native"
    dokkaSourceSets {
        commonMain {}
        linuxMain {}
        iosArm64Main {}
        iosX64Main {}
        macosMain {}
    }
}

task dokkaJavadocCommonJar(type: Jar, dependsOn: dokkaCommon) {
    archiveClassifier.set('javadoc')
    from "$buildDir/javadoc/common"
}

task dokkaJavadocJsJar(type: Jar, dependsOn: dokkaJs) {
    archiveClassifier.set('javadoc')
    from "$buildDir/javadoc/js"
}

task dokkaJavadocJvmJar(type: Jar, dependsOn: dokkaJvm) {
    archiveClassifier.set('javadoc')
    from "$buildDir/javadoc/jvm"
}

task dokkaJavadocNativeJar(type: Jar, dependsOn: dokkaNative) {
    archiveClassifier.set('javadoc')
    from "$buildDir/javadoc/native"
}

task emptyJavadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
}

task emptySourcesJar(type: Jar) {
    archiveClassifier.set('sources')
}

publishing {
    repositories {
        maven {
            if (project.ext.isReleaseVersion) {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            } else {
                url 'https://oss.sonatype.org/content/repositories/snapshots/'
            }

            credentials {
                username = project.findProperty('sonatype.username')
                password = project.findProperty('sonatype.password')
            }
        }
    }

    publications {
        js {
            artifact dokkaJavadocJsJar
        }
        jvm {
            artifact dokkaJavadocJvmJar
        }
        linux {
            artifact dokkaJavadocNativeJar
        }
        // These aren't available if you aren't on macos
        if (Os.isFamily(Os.FAMILY_MAC)) {
            [iosArm64, iosX64, macos].each {
                it.artifact dokkaJavadocNativeJar
            }
        }
        metadata {
            artifact dokkaJavadocCommonJar
        }
        kotlinMultiplatform {
            // Source jars are only created for platforms, not the common artifact.
            artifact emptySourcesJar
            artifact dokkaJavadocCommonJar
        }

        all {
            def siteUrl = 'https://github.com/willowtreeapps/opentest4k'
            def gitUrl = 'https://github.com/willowtreeapps/opentest4k.git'

            pom {
                name = project.name
                description = 'multiplatform implementation/bindings of opentest4j'
                url = siteUrl

                scm {
                    url = siteUrl
                    connection = gitUrl
                    developerConnection = gitUrl
                }

                licenses {
                    license {
                        name = 'The Apache Software License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'evant'
                        name = 'Evan Tatarka'
                    }
                }
            }
        }
    }
}

signing {
    publishing.publications.all { sign it }
}

