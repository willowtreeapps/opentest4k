import org.jetbrains.dokka.gradle.DokkaTask
import org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootExtension
import org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootPlugin
import org.jetbrains.kotlin.gradle.targets.js.npm.tasks.KotlinNpmInstallTask
import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask

plugins {
    `maven-publish`
    signing
    id("io.github.gradle-nexus.publish-plugin") version "1.3.0"
    kotlin("multiplatform") version "1.9.20"
    id("org.jetbrains.dokka") version "1.9.10"
}

group = "com.willowtreeapps.opentest4k"
version = "1.3.0"

kotlin {
    @Suppress("OPT_IN_USAGE")
    applyDefaultHierarchyTemplate {
        common {
            group("other") {
                withNative()
                withJs()
                group("wasm") {
                    withWasm()
                }
            }
        }
    }
    jvm()
    js {
        binaries.library()
        browser()
        nodejs()
    }
    @Suppress("OPT_IN_USAGE")
    wasmJs {
        binaries.library()
        browser()
        nodejs()
    }
    @Suppress("OPT_IN_USAGE")
    wasmWasi {
        nodejs()
    }
    mingwX64()
    androidNativeArm32()
    androidNativeArm64()
    androidNativeX86()
    androidNativeX64()
    linuxX64()
    linuxArm64()
    macosX64()
    macosArm64()
    iosX64()
    iosArm64()
    iosSimulatorArm64()
    tvosX64()
    tvosArm64()
    tvosSimulatorArm64()
    watchosX64()
    watchosArm32()
    watchosArm64()
    watchosSimulatorArm64()
    watchosDeviceArm64()

    sourceSets {
        commonTest {
            dependencies {
                implementation(kotlin("test"))
            }
        }
        val jvmMain by getting {
            dependencies {
                api("org.opentest4j:opentest4j:1.3.0")
            }
        }
        val jvmTest by getting {
            dependencies {
                implementation(kotlin("reflect"))
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

// group js and native docs into buckets
tasks.withType<DokkaTask>().configureEach {
    dokkaSourceSets {
        configureEach {
            displayName.set(platform.get().name)
        }
    }
}

val dokkaCommon by tasks.registering(DokkaTask::class) {
    outputDirectory.set(file("$buildDir/javadoc/common"))
    dokkaSourceSets {
        val commonMain by getting
    }
}
val dokkaJavadocCommonJar by tasks.registering(Jar::class) {
    archiveClassifier.set("javadoc")
    from(dokkaCommon)
}

publishing {
    publications.all {
        if (this is MavenPublication) {
            artifact(dokkaJavadocCommonJar)

            pom {
                val siteUrl = "https://github.com/willowtreeapps/opentest4k"
                val gitUrl = "https://github.com/willowtreeapps/opentest4k.git"
                name.set(project.name)
                description.set("multiplatform implementation/bindings of opentest4j")
                url.set(siteUrl)
                scm {
                    url.set(siteUrl)
                    connection.set(gitUrl)
                    developerConnection.set(gitUrl)
                }
                licenses {
                    license {
                        name.set("The Apache Software License, Version 2.0")
                        url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                        distribution.set("repo")
                    }
                }
                developers {
                    developer {
                        id.set("evant")
                        name.set("Eva Tatarka")
                    }
                }
            }
        }
    }
}

signing {
    setRequired {
        findProperty("signing.keyId") != null
    }
    publishing.publications.all { sign(this) }
}

plugins.withType<NodeJsRootPlugin> {
    extensions.getByType<NodeJsRootExtension>().apply {
        nodeDownloadBaseUrl = "https://nodejs.org/download/v8-canary"
        nodeVersion = "21.0.0-v8-canary202309143a48826a08"
    }
}

tasks.withType<KotlinNpmInstallTask>().configureEach {
    args.add("--ignore-engines")
}

tasks.withType<KotlinCompilationTask<*>>().configureEach {
    compilerOptions {
        freeCompilerArgs.add("-Xexpect-actual-classes")
    }
}

// TODO: remove after https://youtrack.jetbrains.com/issue/KT-46466 is fixed
project.tasks.withType(AbstractPublishToMaven::class.java).configureEach {
    dependsOn(project.tasks.withType(Sign::class.java))
}