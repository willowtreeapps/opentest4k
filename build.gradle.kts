import org.jetbrains.dokka.gradle.DokkaTask
import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTargetWithTests
import java.util.Locale

plugins {
    `maven-publish`
    signing
    id("io.github.gradle-nexus.publish-plugin") version "1.1.0"
    kotlin("multiplatform") version "1.5.30"
    id("org.jetbrains.dokka") version "1.5.0"
}

group = "com.willowtreeapps.opentest4k"
version = "1.2.2"

val nativeTargets = arrayOf(
    "linuxX64",
    "macosX64", "macosArm64",
    "iosArm32", "iosArm64", "iosX64", "iosSimulatorArm64",
    "tvosArm64", "tvosX64", "tvosSimulatorArm64",
    "watchosArm32", "watchosArm64", "watchosX86", "watchosX64", "watchosSimulatorArm64",
)

kotlin {
    jvm()
    js(BOTH) {
        nodejs()
        browser()
        for (compilation in arrayOf("main", "test")) {
            compilations.getByName(compilation).kotlinOptions {
                sourceMap = true
                moduleKind = "umd"
            }
        }
    }

    for (target in nativeTargets) {
        targets.add(presets.getByName(target).createTarget(target))
    }

    sourceSets {
        commonTest {
            dependencies {
                implementation(kotlin("test-common"))
                implementation(kotlin("test-annotations-common"))
            }
        }
        val jvmMain by getting {
            dependencies {
                api("org.opentest4j:opentest4j:1.2.0")
            }
        }
        val jvmTest by getting {
            dependencies {
                implementation(kotlin("reflect"))
                implementation(kotlin("test-junit"))
            }
        }
        val otherMain by creating {
            dependsOn(commonMain.get())
        }
        val otherTest by creating {
            dependsOn(commonTest.get())
        }
        val jsMain by getting {
            dependsOn(otherMain)
        }
        val jsTest by getting {
            dependsOn(otherTest)
            dependencies {
                implementation(kotlin("test-js"))
            }
        }
        val nativeMain by creating {
            dependsOn(otherMain)
        }
        val nativeTest by creating {
            dependsOn(otherTest)
        }
        for (sourceSet in nativeTargets) {
            getByName("${sourceSet}Main") {
                dependsOn(nativeMain)
            }
            getByName("${sourceSet}Test") {
                dependsOn(nativeTest)
            }
        }
    }
}

// Run only the native tests
val nativeTest by tasks.registering {
    kotlin.targets.all {
        if (this is KotlinNativeTargetWithTests<*>) {
            dependsOn("${name}Test")
        }
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

// group js and native docs into buckets
tasks.withType<DokkaTask>().configureEach {
    dokkaSourceSets {
        configureEach {
            displayName.set(platform.get().name)
        }
    }
}

val dokkaCommon by tasks.registering(DokkaTask::class) {
    outputDirectory.set(file("$buildDir/javadoc/common"))
    dokkaSourceSets {
        val commonMain by getting
    }
}
val dokkaJavadocCommonJar by tasks.registering(Jar::class) {
    archiveClassifier.set("javadoc")
    from(dokkaCommon)
}

publishing {

    publications.all {
        if (this is MavenPublication) {
            artifact(dokkaJavadocCommonJar)

            pom {
                val siteUrl = "https://github.com/willowtreeapps/opentest4k"
                val gitUrl = "https://github.com/willowtreeapps/opentest4k.git"
                name.set(project.name)
                description.set("multiplatform implementation/bindings of opentest4j")
                url.set(siteUrl)
                scm {
                    url.set(siteUrl)
                    connection.set(gitUrl)
                    developerConnection.set(gitUrl)
                }
                licenses {
                    license {
                        name.set("The Apache Software License, Version 2.0")
                        url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                        distribution.set("repo")
                    }
                }
                developers {
                    developer {
                        id.set("evant")
                        name.set("Evan Tatarka")
                    }
                }
            }
        }
    }

    // create task to publish all apple (macos, ios, tvos, watchos) artifacts
    @Suppress("UNUSED_VARIABLE")
    val publishApple by tasks.registering {
        publications.all {
            if (name.contains(Regex("macos|ios|tvos|watchos"))) {
                dependsOn("publish${name.capitalize(Locale.ROOT)}PublicationToSonatypeRepository")
            }
        }
    }
}

signing {
    setRequired {
        findProperty("signing.keyId") != null
    }
    publishing.publications.all { sign(this) }
}